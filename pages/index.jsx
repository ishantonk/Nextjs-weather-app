import Head from 'next/head';
import Image from 'next/image';
import axios from 'axios';
import { useState } from 'react';
import { BsSearch } from 'react-icons/bs';
import Weather from '../components/Weather';
import Loading from '../components/Loading';

export default function Home() {
    const [city, setCity] = useState('');
    const [weather, setWeather] = useState('');
    const [loading, setLoading] = useState(false);

    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.NEXT_PUBLIC_API_KEY}&units=metric`;

    const fetchWeather = (e) => {
        e.preventDefault();
        setLoading(true);
        axios.get(url)
            .then(res => {
                setWeather(res.data);
                // console.log(res.data);
                setLoading(false);
            })
            .catch(err => {
                console.log(err);
                setLoading(false);
            }
            );
    }

    if (loading) {
        return <Loading />
    } else {
        return (
            <div>
                <Head>
                    <title>Next Weather{city && ' | ' + city}</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.png" />
                </Head>

                <main>
                    {/* Overlayed */}
                    <div className="absolute -z-10 inset-0 bg-gradient-to-r from-cyan-400 to-blue-700"></div>
                    {/* <div className='absolute inset-0 bg-black/10 z-[1]' /> */}
                    {/* Background image */}
                    {/* <Image src="https://images.unsplash.com/photo-1530908295418-a12e326966ba?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjB8fHdlYXRoZXJ8ZW58MHx8MHx8&auto=format&fit=crop&w=700&q=60"
                        alt="background"
                        layout='fill'
                        className='object-cover'
                    /> */}
                    {/* Search form */}
                    <div className={`relative z-[1] flex flex-col ${weather ? 'my-0' : 'my-24'}`}>
                        <form className='flex justify-center' onSubmit={fetchWeather}>
                            <div className='flex flex-row justify-between align-middle items-center bg-white/80 rounded-lg w-11/12 md:w-9/12 p-1 px-2 m-5 shadow-lg border-2 border-transparent focus-within:border-gray-300 focus-within:border-opacity-50 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-offset-gray-300 focus-within:ring-offset-opacity-50 backdrop-filter backdrop-filter-blur-out backdrop-filter-opacity-50 backdrop-filter-opacity-50-dark backdrop-blur-lg backdrop-blur-lg-dark'>
                                <div className='flex flex-col w-full'>
                                    <input className='outline-none bg-transparent px-2 py-0.5 font-medium text-xl text-gray-800 placeholder:placeholder-gray-500' type="text" autoComplete='off' spellCheck="false" placeholder="Search city" value={city} onChange={(e) => setCity(e.target.value)} />
                                </div>
                                <button className='flex justify-center align-middle p-1 text-gray-600' onClick={fetchWeather}>
                                    <BsSearch size={24} />
                                </button>
                            </div>
                        </form>
                    </div>
                    {/* Weather */}

                    {weather.main ? <Weather data={weather} loading={loading} /> : 
                    <div className='relative z-[1] flex flex-col items-center justify-center mt-40'>
                        <p className='font-light text-5xl text-gray-700'>Please enter a city</p>
                    </div>}
                </main>

                <footer>
                </footer>
            </div>
        )
    }
}
